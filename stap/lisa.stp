global thread_argstr%
global processes%
global syscalls_nonreturn[2]
global first_clone = 0

probe begin
{
  printf("LISA\n");
  syscalls_nonreturn["exit"] = 1
  syscalls_nonreturn["exit_group"] = 1
}

function target_process() {
  if (execname() == "lisa.sh")
    return 0

  if ([pid()] in processes)
    return 1
  else
    return 0
}

probe syscall.*
{
  if (!target_process()) next

  thread_argstr[tid()] = argstr

  if (name in syscalls_nonreturn)
    report_syscall(name, argstr, "")
}

probe syscall.*.return
{
  if (!target_process()) next

  report_syscall(name, thread_argstr[tid()], retstr)
}

probe syscall.{clone,fork}.return
{
  if (first_clone == 0) {
    if (pid() == target()) {
      processes[retval] = pid()
      report_process(retval, pid());
      first_clone = 1
    }
  }

  if (!target_process()) next
  processes[retval] = pid()
  report_process(retval, pid());
}

probe syscall.{open,openat} {
  if (!target_process()) next

  report_openfile(filename);
}

function report_syscall(name, argstr, retstr)
{
  printf("SYSCALL\n");
  printf("%s\n", execname());
  printf("%s\n", name);
  printf("%d\n", pid());
  printf("%s\n", argstr);
  printf("%s\n", retstr);
}

function report_openfile(filename)
{
  printf("OPENFILE\n");
  printf("%s\n", filename);
}

function report_process(pid, parent)
{
  printf("PROCESS\n");
  printf("%d:%d\n", pid, parent);
}
